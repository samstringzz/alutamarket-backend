# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar Data

enum MediaType {
	IMAGE
	VIDEO
	AUDIO
	DOCUMENT
}

enum RoleType {
	RECIVER
	SENDER
}

type StoreFollower {
	follower_id: Int!
	follower_name: String!
	store_id: Int!
	follower_image: String!
}
type Order {
	id: Int!
	customer: String!
	customer_email: String!
	price: Float!
	status: String!
	date: String!
	store_id: String!
}
type MessageUser {
	id: Int!
	avatar: String
	role: RoleType!
	name: String!
	status: String!
}

type Message {
	id: Int!
	chat_id: Int!
	content: String!
	user: MessageUser!
	media: MediaType!
	is_read: Boolean!
}

type Chat {
	id: Int!
	latest_message: Message
	unread_count: Int!
	users: [Int]
}

input MessageUserInput {
	id: Int!
	avatar: String
	role: RoleType!
	name: String!
}

input MessageInput {
	id: Int!
	chat_id: String!
	content: String!
	user: MessageUserInput!
	media: MediaType!
	is_read: Boolean!
}

input ChatInput {
	users_id: [Int!]!
	chat_id: String
}

type DVADetails {
	surname: String!
	othername: String!
	bvn: String!
	country: String!
	bank_code: String!
	account_number: String!
	user_id: String!
	email: String!
	store_name: String!
}

type Skynet {
	id: ID!
	user_id: String
	status: String
	request_id: String!
	transaction_id: String
	type: String
	receiever: String
}
type StoreCustomer {
	name: String!
	phone: String!
	address: String!
}
type StoreOrder {
	store_id: String!
	product: [Product!]
	trtRef: String!
	active: Boolean!
	status: String!
	customer: StoreCustomer!
	uuid: String!
	createdAt: Time!
}

type Store {
	id: ID!
	link: String!
	name: String!
	wallet: Float!
	user: Int!
	email: String!
	description: String!
	followers: [StoreFollower!]
	product: [Product!]
	transactions: [Transaction!]
	orders: [StoreOrder!]
	address: String!
	status: Boolean!
	thumbnail: String!
	phone: String!
	background: String!
	has_physical_address: Boolean!
}
type VerifyOTP {
	phone: String!
	code: String!
	email: String
}
type HandledProducts {
	userId: Int!
	productId: Int!
	productName: String
	productThumbnail: String
	productPrice: Float
	productDiscount: Float
	productStatus: Boolean
	productQuantity: Int
}
input ProductInput {
	name: String!
	id: String
	description: String!
	file: String!
	price: Float!
	discount: Float!
	thumbnail: String!
	image: [String!]!
	quantity: Int!
	variant: [NewVariant!]
	review: [NewReview!]
	store: String!
	category: Int!
	subcategory: Int!
	always_available: Boolean!
}
input customerInput {
	name: String!
	phone: String!
	address: String!
}
input StoreProductInput {
	name: String!
	thumbnail: String!
	quantity: Int!
	price: Float!
	id: String
}
input StoreFollowerInput {
	follower_id: Int!
	follower_name: String!
	follower_image: String!
	store_id: Int!
	action: String!
}
input StoreOrderInput {
	store_id: String!
	product: [StoreProductInput]
	status: String!
	customer: customerInput!
}

input DVAAccountInput {
	user_id: String!
	store_name: String!
}
input SkynetInput {
	amount: Int!
	user_id: Int!
	billers_code: String
	variant_code: String
	service_id: String!
	phone_number: String
	quantity: String
	subscription_type: String
	type: String!
}
input StoreInput {
	id: ID
	link: String!
	name: String!
	user: Int!
	description: String!
	address: String!
	wallet: Int!
	has_physical_address: Boolean!
	phone: String!
	status: Boolean!
	email: String
	thumbnail: String
	background: String
}
input UpdateStoreInput {
	id: ID
	link: String
	name: String
	user: Int
	description: String
	address: String
	wallet: Int
	has_physical_address: Boolean
	status: Boolean
	phone: String
	email: String
	thumbnail: String
	background: String
}

input UpdateStoreOrderInput {
	id: ID
	status: String
	store_id: String
}
type PaymentDetails {
	name: String!
	phone: String!
	address: String!
	info: String!
}
type User {
	id: ID!
	fullname: String!
	email: String!
	campus: String!
	avatar: String
	dob: String
	gender: String
	password: String!
	phone: String!
	usertype: String!
	stores: [Store!]
	active: Boolean!
	access_token: String
	refresh_token: String
	twofa: Boolean!
	code: String!
	paymnetDetails: PaymentDetails
	codeexpiry: String!
}

input NewUser {
	fullname: String!
	email: String!
	campus: String!
	password: String!
	stores: StoreInput
	phone: String!
	usertype: String!
	code: String
	codeexpiry: Time
}
input PaymentDetailsInput {
	name: String!
	phone: String!
	address: String!
	info: String!
}
input UpdateUserInput {
	id: ID
	fullname: String
	email: String
	campus: String
	password: String
	stores: StoreInput
	dob: String
	phone: String
	gender: String
	active: Boolean
	usertype: String
	code: String
	avatar: String
	paymnetDetails: PaymentDetailsInput
}

input NewCategory {
	name: String!
}
input NewSubCategory {
	name: String!
	category: Int!
}
input NewVerifyOTP {
	phone: String!
	code: String!
	email: String
}

input ModifyCartItemInput {
	productId: ID
	productName: String
	quantity: Int!
	user: Int!
}
type Category {
	id: ID!
	name: String!
	slug: String!
	subcategories: [SubCategory!]
}

type SubCategory {
	name: String!
	slug: String!
	category: Int!
}
type CartItem {
	product: Product!
	quantity: Int!
}

type Cart {
	items: [CartItem!]!
	total: Float!
	active: Boolean!
	user: Int!
	id: ID
}
type VariantValue {
	value: String!
	price: Float!
	images: [String!]
}
type Variant {
	name: String!
	value: [VariantValue!]!
}
type Review {
	rating: Float!
	message: String!
	image: String!
	product_id: Int!
	username: String!
	id: ID
}
type Product {
	id: Int!
	name: String!
	slug: String!
	description: String!
	price: Float!
	discount: Float!
	status: Boolean!
	quantity: Int!
	thumbnail: String!
	image: [String!]!
	file: String
	variant: [Variant]
	review: [Review]
	store: String!
	category: String!
	subcategory: String!
	always_available: Boolean!
}

type Customer {
	id: String!
	first_name: String!
	last_name: String!
	email: String!
	customer_code: String!
	phone: String!
	risk_action: String!
}
type Bank {
	name: String!
	id: Int!
	slug: String!
}

type SplitConfig {
	Subaccount: String!
}

type Account {
	customer: Customer!
	bank: Bank!
	id: Int!
	account_number: Int!
	account_name: String!
	created_at: Time!
	updated_at: Time!
	split_config: SplitConfig!
	active: Boolean!
	assigned: Boolean!
}

input PaymentData {
	storeID: [Int!]
	status: String
	userID: String!
	amount: Float
	UUID: String
	paymentGateway: String!
}

type Transaction {
	storeID: Int!
	status: String!
	type: String!
	user: String!
	amount: Float!
	UUID: String!
	category: String!
	created_at: Time!
}
type LoginRes {
	id: Int!
	access_token: String!
	refresh_token: String!
}

input ReviewInput {
	username: String!
	image: String!
	message: String!
	rating: Float!
	productId: Int!
}
input LoginReq {
	email: String!
	password: String!
}
input NewVariantValue {
	value: String!
	price: Float
	images: [String!]
}
input NewVariant {
	name: String!
	value: [NewVariantValue!]!
}
input NewReview {
	message: String!
	rating: Float!
	product_id: String!
	image: String!
	username: String!
}
type BundleVariation {
	variationCode: String!
	name: String!
	variationAmount: String!
	fixedPrice: String!
}

type SubscriptionBundle {
	serviceName: String!
	serviceID: String!
	convinienceFee: String!
	variations: [BundleVariation!]!
}
type SmartcardVerificationResponse {
	code: String!
	content: SmartcardContent!
}

type SmartcardContent {
	customerName: String!
	status: String!
	dueDate: String!
	customerNumber: Int!
	customerType: String!
	currentBouquet: String!
	currentBouquetCode: String!
	renewalAmount: Float!
}
type TrackedProduct {
	id: Int!
	name: String!
	thumbnail: String!
	price: Float!
	discount: Float!
	status: String!
}
type deliveryDetails {
	method: String!
	address: String!
	fee: Float!
}
type PurchasedOrder {
	cart_id: Int!
	coupon: String!
	fee: Float!
	status: String!
	user_id: String!
	amount: Float!
	uuid: String!
	paymentGateway: String!
	paymentMethod: String!
	transRef: String!
	transStatus: String!
	products: [TrackedProduct]!
	deliveryDetails: deliveryDetails!
	textRef: String!
}
input SmartCardInput {
	service_id: String!
	billers_code: String!
	card_type: String
}
input TransactionInput {
	store_id: String!
	status: String!
	user: String!
	amount: Float
	type: String!
	category: String!
}
type Query {
	Users(limit: Int, offset: Int): [User!]!
	User(id: ID!): User
	Categories: [Category!]!
	Category(id: Int!): Category
	SubCategory(id: ID!): SubCategory
	Products(store: String, limit: Int, offset: Int): ProductPaginationData!
	Product(id: Int!): Product
	HandledProducts(user: Int!, type: String!): [HandledProducts!]!
	RecommendedProducts(query: String!): [Product!]!
	RecentlyAddedProducts(user: Int!): [Product!]!
	ProductReviews(id: Int!, sellerStore: String!): [Review!]!
	Cart(user: Int!): Cart!
	SubscriptionBundle(serviceID: String!): SubscriptionBundle
	searchProducts(query: String!): [Product!]
	Stores(user: Int, limit: Int, offset: Int): StorePaginationData!
	Store(id: Int!): Store
	StoreByName(name: String!): Store
	PurchasedOrder(user: Int!): [PurchasedOrder!]!
	Skynets(id: String!): [Skynet!]
	Skynet(id: String!): Skynet
	MYDVA(email: String!): Account
	Chats(userID: String!): [Chat]
}

type Mutation {
	createUser(input: NewUser!): User!
	createOrder(input: StoreOrderInput!): StoreOrder
	updateOrder(input: UpdateStoreOrderInput!): StoreOrder
	updateUser(input: UpdateUserInput): User!
	createVerifyOTP(input: NewVerifyOTP!): User!
	loginUser(input: LoginReq!): LoginRes!
	addHandledProduct(
		userId: Int!
		productId: Int!
		type: String!
	): HandledProducts!
	addReview(input: ReviewInput!): Review!
	checkStoreName(input: String!): String
	updateStoreFollower(input: StoreFollowerInput): Store
	createSkynet(input: SkynetInput): String!
	removeHandledProduct(prd: Int!, type: String): HandledProducts
	createCategory(input: NewCategory!): Category!
	createSubCategory(input: NewSubCategory!): SubCategory!
	createProduct(input: ProductInput!): Product!
	updateProduct(input: ProductInput): Product!
	toggleStoreFollowStatus(user: Int!, store: Int!): String
	deleteProduct(productId: Int!): Product!
	modifyCart(input: ModifyCartItemInput!): Cart!
	removeAllCart(cartID: Int!): Cart!
	createStore(input: StoreInput!): Store!
	updateStore(input: UpdateStoreInput): Store!
	deleteStore(storeId: Int!): Store!
	createDVAAccount(input: DVAAccountInput!): String!
	initializePayment(input: PaymentData!): String
	verifySmartCard(input: SmartCardInput!): SmartcardVerificationResponse
	createChat(input: ChatInput!): String
	createTransaction(input: TransactionInput!): Transaction
}

type Subscription {
	productSearchResults(query: String!): [Product]
}

type ProductPaginationData {
	data: [Product!]!
	current_page: Int!
	per_page: Int!
	total: Int!
	next_page: Int!
	prev_page: Int!
}

type StorePaginationData {
	data: [Store!]!
	current_page: Int!
	per_page: Int!
	total: Int!
}
