# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar Data

# type ApiResponse {
#   message: String!
#   status: Int!
#   data: Data
# }
type Follower {
  follower_id: Int!
  follower_name: String!
  store_id: Int!
  follower_image: Int!
}
type Store {
  id: ID!
  link: String!
  name: String!
  wallet:Float!
  user: Int!
  products: [Product!]
  description: String!
  followers: [Follower!]
  has_physical_address: Boolean!
}
type VerifyOTP {
  phone: String!
  code: String!
  email: String
}
type WishList {
  userId: Int!
  productId: Int!
  productName: String
  productThumbnail: String
  productPrice: Float
  productDiscount: Float
  productStatus: Boolean
  productQuantity: Int
}
input StoreInput {
  id: ID
  link: String!
  name: String!
  user: Int!
  description: String!
  address: String!
  wallet: Int!
  has_physical_address: Boolean!
  phone:String!
  email:String
  thumbnail:String
  background:String
}
type User {
  id: ID!
  fullname: String!
  email: String!
  campus: String!
  avatar:String
  password: String!
  phone: String!
  usertype: String!
  stores: [Store!]
  active: Boolean!
  access_token: String
  refresh_token: String
  twofa: Boolean!
  code: String!
  codeexpiry: String!
}

input NewUser {
  fullname: String!
  email: String!
  campus: String!
  password: String!
  stores: StoreInput
  phone: String!
  usertype: String!
  code: String
  codeexpiry: Time
}
input NewWishlist {
  user: Int!
  product: Int!
}
input NewCategory {
  name: String!
}
input NewSubCategory {
  name: String!
  category: Int!
}
input NewVerifyOTP {
  phone: String!
  code: String!
  email: String
}

input AddToCartItemInput {
  productId: ID!
  quantity: Int!
  user: Int!
}
type Category {
  id: ID!
  name: String!
  slug: String!
  subcategories: [SubCategory!]
}

type SubCategory {
  name: String!
  slug: String!
  category: Int!
}
type CartItem {
  product: Product!
  quantity: Int!
}

type Cart {
  items: [CartItem!]!
  total: Float!
  active: Boolean!
  user: Int!
  id: ID
}

type Product {
  id: Int!
  name: String!
  slug: String!
  description: String!
  price: Float!
  discount: Float!
  status: Boolean!
  quantity: Int!
  thumbnail: String!
  image: [String!]!
  variant: String!
  store: String!
  category: String!
  subcategory: String!
}
input NewProduct {
  name: String!
  description: String!
  price: Float!
  discount: Float!
  thumbnail: String!
  image: [String!]!
  quantity: Int!
  variant: [NewVariant]
  store: String!
  category: Int!
  subcategory: Int!
}

type LoginRes {
  id: Int!
  access_token: String!
  refresh_token: String!
}

input LoginReq {
  email: String!
  password: String!
}
input NewVariant {
  title: String!
  item: String!
}
type ProductPaginationData{
  products:[Product!]!
  total: Int!
}
type StorePaginationData {
  products: [Store!]!
  total: Int!
}
type Query {
  Users(limit: Int, offset: Int): [User!]!
  User(id: ID!): User
  Categories: [Category!]!
  Category(id: Int!): Category
  SubCategory(id: ID!): SubCategory
  Products(store: String, limit: Int, offset: Int): ProductPaginationData!
  Product(id: Int!): Product
  getWishListedProducts(user: Int!): [WishList!]!
  Cart(user: Int!): Cart!
  searchProducts(query: String!): [Product]
  Stores(user:Int,limit:Int,offset:Int):StorePaginationData!
  Store(id:Int!):Store
}

type Mutation {
  createUser(input: NewUser!): User!
  createVerifyOTP(input: NewVerifyOTP!): User!
  loginUser(input: LoginReq!): LoginRes!
  addWishListedProduct(userId: Int!, productId: Int!): WishList!
  removeWishListedProduct(user: Int!): WishList
  createCategory(input: NewCategory!): Category!
  createSubCategory(input: NewSubCategory!): SubCategory!
  createProduct(input: NewProduct!): Product!
  addToCart(input: AddToCartItemInput!): Cart!
  removeFromCart(productId: ID!): Cart!
  createStore(input:StoreInput!):Store!
  updateStore(storeId:Int!):Store!
  deleteStore(storeId:Int!):Store!
}

type Subscription {
  productSearchResults(query: String!): [Product]
}
