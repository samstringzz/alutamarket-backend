package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"os"

	"github.com/Chrisentech/aluta-market-api/graph/model"
	"github.com/Chrisentech/aluta-market-api/internals/user"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	// var handler *user.Handler
	dbURI := os.Getenv("DB_URI")
	userRep := user.NewRepository(dbURI)
	userSrvc := user.NewService(userRep)
	userHandler := user.NewHandler(userSrvc)
	userReq := &user.CreateUserReq{
		Fullname: input.Fullname,
		Email:    input.Email,
		Campus:   input.Campus,
		Password: input.Password,
		Phone:    input.Phone,
		Usertype: input.Usertype,
		// Code:       input.Code,
		// Codeexpiry: input.Codeexpiry,
	}
	resp, err := userHandler.CreateUser(ctx, userReq)
	if err != nil {
		return nil, err
	}
	fmt.Println(&resp.Data)
	user := &model.User{
		// Fullname:,
	}
	return user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
